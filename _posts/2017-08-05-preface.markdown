---
layout: post
title: 前端知识体系梳理
date: 2017-08-05 12:38 +0800
category: 前端
---
### 非常完善的前端知识体系是什么样的？
废话不多说，咱上图！
![前端知识结构](https://pic1.zhimg.com/d96bcca74b4d4a010c3b17366685cc18_r.jpg)
这是一张相对来说，非常完善的一张关于前端开发知识结构的图，这种图，一般给人的感觉就是，怎么有这么多东西要学啊！！！**前端，从入门到放弃** :(
  
的确，一个大神级别的前端开发，的确这是必须掌握的知识结构，不仅要求广度，还要求精。作为一个向大神看齐的我，又有超级有能量的好奇心驱使，我已入坑，注定会在coding的世界，越走越远，希望玩得快乐，享受痛苦，不断进步。
### 我的梳理
首先，我的梳理很个性化，完全是面向自己的，不是面向对象哟，所以，不求严禁，不求完善，只求过得去自己就行。

前端，从代码组成方面来看，主要涉及三种语言HTML,CSS和JavaScript。他们各自的功能为，HTML负责结构化，CSS是表现，JS是行为。随着互联网的发展，为了适应这种发展，前端作为web应用的一个重要组成部分，开始变得越来越重要，因为前端是最贴近用户的，它的性能和表现，直接影响用户的感受。所以，前端的终极目的就是用户的最佳的体验，服务好用户。

* `JavaScript`是解释类语言，解析就有效率问题，于是经过竞争，`google`的`V8`引擎胜出;
* `JS`很灵活，但是对于大型应用，灵活不是一种好事，走在前面的高级`JSer`们，遇水搭桥，逢山开路，出现了借鉴静态强类型的语言，如`C#`、`Java`而获得了利器`TypeScript`和`CoffeeScript`；
* 随着日益复杂的网页出现，功能要求开始增多，`JS`操作`dom`的繁琐，导致开发效率低下，`JQuery`出现了；
* `web2.0`到来，互联网越来越庞大，信息、服务越要越多，技术知道自己需要提前做好准备，于是在这之前，`HTML5`, `css3`, `ES6`到来了；
* `JQuery`很锋利，可是随着交互需求升级，`JQuery`操作dom越来越频繁，导致网页或应用的性能下降，开发效率也开始下降，到了这个口子，优化的需求迫切，于是为了解决这个问题，前端框架实践开始，诞生了很多框架，最后到今天，经过竞争，脱颖而出了`Angular`, `React`, `Vue`三大框架；
* 开发效率问题，网页或应用性能问题，代码扩展性和维护性问题，问题层出不穷，前辈们理清问题，打造工具，于是`grunt`, `gulp`, `webpack`等工具就问世了；
* 某位工程师想要开发一款高性能`web`服务器，经过考虑，比对优缺点，由于`JS`的特性，`V8`引擎的性能，`node.js`诞生；`node.js`它不仅在`web`服务器端表现良好，更对前端的开发，起到了很好地辅助作用；
* 未来的故事，还将继续...